import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

TOKEN = "YOUR_BOT_TOKEN"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–Ω–∏–µ –ë–î
conn = sqlite3.connect("budget.db")
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS transactions (
                  id INTEGER PRIMARY KEY, type TEXT, amount REAL, category TEXT)''')
cursor.execute('''CREATE TABLE IF NOT EXISTS orders (
                  id INTEGER PRIMARY KEY, name TEXT, amount REAL, category TEXT)''')
conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
def add_transaction(trans_type, amount, category):
    cursor.execute("INSERT INTO transactions (type, amount, category) VALUES (?, ?, ?)",
                   (trans_type, amount, category))
    conn.commit()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
def add_order(name, amount, category):
    cursor.execute("INSERT INTO orders (name, amount, category) VALUES (?, ?, ?)",
                   (name, amount, category))
    conn.commit()
    add_transaction("expense", amount, category)  # –ó–∞–∫–∞–∑ —É–º–µ–Ω—å—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
def get_balance():
    cursor.execute("SELECT SUM(amount) FROM transactions WHERE type='income'")
    income = cursor.fetchone()[0] or 0
    cursor.execute("SELECT SUM(amount) FROM transactions WHERE type='expense'")
    expense = cursor.fetchone()[0] or 0
    return income - expense

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º.\n–ò—Å–ø–æ–ª—å–∑—É–π /income, /expense –∏ /order –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.")

@dp.message(Command("income"))
async def add_income(message: types.Message):
    try:
        parts = message.text.split()
        amount = float(parts[1])
        category = parts[2] if len(parts) > 2 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        add_transaction("income", amount, category)
        await message.answer(f"‚úÖ –î–æ—Ö–æ–¥ {amount} —Å—É–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}.")
    except:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /income 100000 –ó–∞—Ä–ø–ª–∞—Ç–∞")

@dp.message(Command("expense"))
async def add_expense(message: types.Message):
    try:
        parts = message.text.split()
        amount = float(parts[1])
        category = parts[2] if len(parts) > 2 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        add_transaction("expense", amount, category)
        await message.answer(f"‚ùå –†–∞—Å—Ö–æ–¥ {amount} —Å—É–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}.")
    except:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /expense 50000 –ï–¥–∞")

@dp.message(Command("order"))
async def add_order_handler(message: types.Message):
    try:
        parts = message.text.split()
        name = parts[1]
        amount = float(parts[2])
        category = parts[3] if len(parts) > 3 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        add_order(name, amount, category)
        await message.answer(f"üì¶ –ó–∞–∫–∞–∑ '{name}' –Ω–∞ —Å—É–º–º—É {amount} —Å—É–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}.")
    except:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /order –¢–æ–≤–∞—Ä 150000 –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞")

@dp.message(Command("balance"))
async def show_balance(message: types.Message):
    balance = get_balance()
    await message.answer(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Å—É–º")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
