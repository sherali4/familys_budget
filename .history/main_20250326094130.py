import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from config import token

TOKEN = token
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="‚ûï –î–æ—Ö–æ–¥")],
        [KeyboardButton(text="‚ûñ –†–∞—Å—Ö–æ–¥"), KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑")],
        [KeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")]
    ],
    resize_keyboard=True
)

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
category_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞",
                              callback_data="category_–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞")],
        [InlineKeyboardButton(text="–û–¥–µ–∂–¥–∞", callback_data="category_–û–¥–µ–∂–¥–∞")],
        [InlineKeyboardButton(
            text="–ü—Ä–æ–¥—É–∫—Ç—ã", callback_data="category_–ü—Ä–æ–¥—É–∫—Ç—ã")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î


def execute_query(query, params=()):
    with sqlite3.connect("budget.db") as conn:
        cursor = conn.cursor()
        cursor.execute(query, params)
        conn.commit()
        return cursor


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
execute_query('''CREATE TABLE IF NOT EXISTS transactions (
                  id INTEGER PRIMARY KEY, type TEXT, amount REAL, category TEXT)''')
execute_query('''CREATE TABLE IF NOT EXISTS orders (
                  id INTEGER PRIMARY KEY, name TEXT, amount REAL, category TEXT)''')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏


def add_transaction(trans_type, amount, category):
    execute_query("INSERT INTO transactions (type, amount, category) VALUES (?, ?, ?)",
                  (trans_type, amount, category))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞


def add_order(name, amount, category):
    execute_query("INSERT INTO orders (name, amount, category) VALUES (?, ?, ?)",
                  (name, amount, category))
    add_transaction("expense", amount, category)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞


def get_balance():
    income = execute_query(
        "SELECT SUM(amount) FROM transactions WHERE type='income'").fetchone()[0] or 0
    expense = execute_query(
        "SELECT SUM(amount) FROM transactions WHERE type='expense'").fetchone()[0] or 0
    return income - expense


@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=keyboard)


@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance(message: Message):
    balance = get_balance()
    await message.answer(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} —Å—É–º")


@dp.message(lambda message: message.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
async def show_categories(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=category_keyboard)


@dp.callback_query(lambda callback: callback.data.startswith("category_"))
async def category_selected(callback: types.CallbackQuery):
    category_name = callback.data.split("_")[1]
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}")
    await callback.answer()


@dp.callback_query(lambda callback: callback.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)
    await callback.answer()


@dp.message(lambda message: message.text == "‚ûï –î–æ—Ö–æ–¥")
async def request_income(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n/income 100000 –ó–∞—Ä–ø–ª–∞—Ç–∞")


@dp.message(lambda message: message.text == "‚ûñ –†–∞—Å—Ö–æ–¥")
async def request_expense(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n/expense 50000 –ï–¥–∞")


@dp.message(lambda message: message.text == "üì¶ –ó–∞–∫–∞–∑")
async def request_order(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n/order –¢–æ–≤–∞—Ä 150000 –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞")


@dp.message(Command("income"))
async def add_income(message: Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 2 or not parts[1].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /income 100000 –ó–∞—Ä–ø–ª–∞—Ç–∞")
        return
    amount = float(parts[1])
    category = parts[2] if len(parts) > 2 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    add_transaction("income", amount, category)
    await message.answer(f"‚úÖ –î–æ—Ö–æ–¥ {amount} —Å—É–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}.")


@dp.message(Command("expense"))
async def add_expense(message: Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 2 or not parts[1].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /expense 50000 –ï–¥–∞")
        return
    amount = float(parts[1])
    category = parts[2] if len(parts) > 2 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    add_transaction("expense", amount, category)
    await message.answer(f"‚ùå –†–∞—Å—Ö–æ–¥ {amount} —Å—É–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}.")


@dp.message(Command("order"))
async def add_order_handler(message: Message):
    parts = message.text.split(maxsplit=3)
    if len(parts) < 3 or not parts[2].isdigit():
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /order –¢–æ–≤–∞—Ä 150000 –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞")
        return
    name = parts[1]
    amount = float(parts[2])
    category = parts[3] if len(parts) > 3 else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
    add_order(name, amount, category)
    await message.answer(f"üì¶ –ó–∞–∫–∞–∑ '{name}' –Ω–∞ —Å—É–º–º—É {amount} —Å—É–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}.")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
