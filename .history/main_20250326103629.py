import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import token

TOKEN = token
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM


class CategoryState(StatesGroup):
    adding = State()
    editing_new = State()
    deleting = State()


# –û–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å"), KeyboardButton(text="‚ûï –î–æ—Ö–æ–¥")],
        [KeyboardButton(text="‚ûñ –†–∞—Å—Ö–æ–¥"), KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑")],
        [KeyboardButton(text="üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")]
    ],
    resize_keyboard=True
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î


def execute_query(query, params=()):
    with sqlite3.connect("budget.db") as conn:
        cursor = conn.cursor()
        cursor.execute(query, params)
        conn.commit()
        return cursor


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
execute_query('''CREATE TABLE IF NOT EXISTS transactions (
                  id INTEGER PRIMARY KEY, type TEXT, amount REAL, category TEXT)''')
execute_query('''CREATE TABLE IF NOT EXISTS orders (
                  id INTEGER PRIMARY KEY, name TEXT, amount REAL, category TEXT)''')
execute_query('''CREATE TABLE IF NOT EXISTS categories (
                  id INTEGER PRIMARY KEY, name TEXT UNIQUE)''')

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏


def add_category(name):
    execute_query("INSERT INTO categories (name) VALUES (?)", (name,))


def delete_category(name):
    execute_query("DELETE FROM categories WHERE name = ?", (name,))


def get_categories():
    return [row[0] for row in execute_query("SELECT name FROM categories").fetchall() if row[0] is not None]

# –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤


def get_category_keyboard():
    categories = get_categories()
    buttons = [
        [InlineKeyboardButton(text=cat, callback_data=f"category_{cat}")]
        for cat in categories if cat
    ]
    buttons.append([InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_category")])
    buttons.append([InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–º–µ–π–Ω—ã–º –±—é–¥–∂–µ—Ç–æ–º.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", reply_markup=keyboard)


@dp.message(lambda message: message.text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤")
async def show_categories(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏:", reply_markup=get_category_keyboard())


@dp.callback_query(lambda callback: callback.data.startswith("category_"))
async def category_selected(callback: types.CallbackQuery):
    category_name = callback.data.split("_")[1]
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category_name}")
    await callback.answer()

# üîπ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏


@dp.callback_query(lambda callback: callback.data == "add_category")
async def add_category_handler(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(CategoryState.adding)
    await callback.answer()


@dp.message(CategoryState.adding)
async def process_new_category(message: Message, state: FSMContext):
    category_name = message.text.strip()
    if not category_name:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    if category_name in get_categories():
        await message.answer(f"‚ö† –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        return
    add_category(category_name)
    await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_category_keyboard())
    await state.clear()


@dp.callback_query(lambda callback: callback.data == "back_to_main")
async def back_to_main_menu(callback: types.CallbackQuery):
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=keyboard)
    await callback.answer()


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
